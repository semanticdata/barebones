---
import { type CollectionEntry } from "astro:content";
import { SITE } from "@/siteConfig";

interface Props {
  title?: string;
  description?: string;
  post?: CollectionEntry<"blog">;
}

const { title, description, post } = Astro.props;

// Determine if this is for a post or a page
const isPost = !!post;

// Set title and description based on whether it's a post or page
const pageTitle = isPost
  ? `${post.data.title || SITE.title} | ${SITE.title}`
  : title || SITE.title;

const pageDescription = isPost
  ? post.data.description || SITE.description
  : description || SITE.description;

// Set OG image - use post image if available, otherwise default
const ogImage =
  isPost && post.data.image?.src
    ? `${SITE.url}${post.data.image.src}`
    : new URL("./og.jpg", Astro.site).toString();

const ogImageAlt = isPost ? post.data.title || SITE.title : pageTitle;
---

<title>{pageTitle}</title>
{isPost && <meta name="title" content={pageTitle} />}
<meta name="description" content={pageDescription} />
<!-- <link rel="canonical" href={SITE.url} /> -->
<!-- <link rel="me" href="https://social.lol/@database" /> -->
{isPost && <meta name="fediverse:creator" content="@database@social.lol" />}

<meta
  property="og:title"
  content={isPost ? post.data.title || SITE.title : pageTitle}
/>
<meta property="og:description" content={pageDescription} />
<meta property="og:image" content={ogImage} />
<meta property="og:image:alt" content={ogImageAlt} />
<meta property="og:type" content="website" />
<meta property="og:locale" content={SITE.locale} />

<meta
  name="twitter:title"
  content={isPost ? post.data.title || SITE.title : pageTitle}
/>
<meta name="twitter:description" content={pageDescription} />
<meta name="twitter:image" content={ogImage} />
<meta name="twitter:image:alt" content={ogImageAlt} />
<meta name="twitter:card" content="summary_large_image" />

{
  isPost &&
    post.data.tags &&
    post.data.tags.map((tag: string) => (
      <meta property="article:tag" content={tag} />
    ))
}
