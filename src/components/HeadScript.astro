<script is:inline>
  function getThemeButtons() {
    return {
      light: document.getElementById("light-theme-button"),
      dark: document.getElementById("dark-theme-button"),
      system: document.getElementById("system-theme-button"),
    };
  }

  function init() {
    preloadTheme();
    onScroll();
    animate();
    updateThemeButtons();
    // addCopyCodeButtons();

    const backToTop = document.getElementById("back-to-top");
    // Add null check for backToTop
    if (backToTop) {
      backToTop.addEventListener("click", (event) => scrollToTop(event));
    } else {
      console.warn("Element with ID 'back-to-top' not found.");
    }

    const themeButtons = getThemeButtons();

    Object.entries(themeButtons).forEach(([theme, button]) => {
      // Add null check for button
      if (button) {
        button.addEventListener("click", () => {
          localStorage.setItem("theme", theme);
          if (theme === "system") {
            const isDark = window.matchMedia(
              "(prefers-color-scheme: dark)",
            ).matches;
            toggleTheme(isDark);
          } else {
            toggleTheme(theme === "dark");
          }
          updateThemeButtons();
        });
      } else {
        console.warn(`Theme button element for '${theme}' not found.`);
      }
    });

    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", (event) => {
        if (localStorage.theme === "system") {
          toggleTheme(event.matches);
        }
      });

    document.addEventListener("scroll", debounce(onScroll, 100));
  }

  function updateThemeButtons() {
    const theme = localStorage.getItem("theme") || "system"; // Default to system if nothing set
    const themeButtons = getThemeButtons();

    Object.values(themeButtons).forEach((button) => {
      // Add null check
      if (button) {
        button.classList.remove("bg-black/15", "dark:bg-white/5");
      }
    });

    const activeButton = themeButtons[theme];
    // Add null check
    if (activeButton) {
      activeButton.classList.add("bg-black/15", "dark:bg-white/5");
    } else {
       // Handle case where the stored theme doesn't match an existing button ID
       // This might happen if button IDs change or localStorage has old data.
       // Maybe default to 'system' visually if the specific button isn't found.
       if (themeButtons.system) {
         themeButtons.system.classList.add("bg-black/15", "dark:bg-white/5");
       }
       console.warn(`Active theme button element for stored theme '${theme}' not found.`);
    }
  }

  function animate() {
    // Consider adding a comment explaining the staggered effect
    // Stagger animation for elements with the 'animate' class
    const animateElements = document.querySelectorAll(".animate");

    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add("show");
      }, index * 100);
    });
  }

  function onScroll() {
    if (window.scrollY > 0) {
      document.documentElement.classList.add("scrolled");
    } else {
      document.documentElement.classList.remove("scrolled");
    }
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  }

  function toggleTheme(dark) {
    document.documentElement.classList.toggle("dark", dark);
    updateThemeButtons();
  }

  function preloadTheme() {
    const userTheme = localStorage.theme;

    // Explicitly check for undefined or null localStorage theme
    if (userTheme === "light" || userTheme === "dark") {
      toggleTheme(userTheme === "dark");
    } else { // Includes 'system' or undefined/null
      const isDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
      toggleTheme(isDark);
      // If theme was undefined/null, explicitly set it to 'system' in localStorage
      // to ensure consistency after first load.
      if (!userTheme) {
        localStorage.setItem("theme", "system");
      }
    }
    // Update buttons immediately after preloading
    updateThemeButtons();
  }

  // function addCopyCodeButtons() {
  //   const copyButtonLabel = "Copy Code";
  //   const codeBlocks = Array.from(document.querySelectorAll("pre"));

  //   async function copyCode(codeBlock, copyButton) {
  //     const codeText = codeBlock.innerText;
  //     const textToCopy = codeText.replace(copyButton.innerText, "");

  //     await navigator.clipboard.writeText(textToCopy);
  //     copyButton.innerText = "Copied!";

  //     setTimeout(() => {
  //       copyButton.innerText = copyButtonLabel;
  //     }, 2000);
  //   }

  //   function createCopyButton() {
  //     const button = document.createElement("button");
  //     button.innerText = copyButtonLabel;
  //     button.classList.add("copy-code");
  //     button.setAttribute("aria-label", "Copy code to clipboard");
  //     return button;
  //   }

  //   codeBlocks.forEach(codeBlock => {
  //     const wrapper = document.createElement("div");
  //     wrapper.style.position = "relative";

  //     const copyButton = createCopyButton();
  //     codeBlock.setAttribute("tabindex", "0");
  //     codeBlock.appendChild(copyButton);

  //     codeBlock.parentNode.insertBefore(wrapper, codeBlock);
  //     wrapper.appendChild(codeBlock);

  //     copyButton.addEventListener("click", async () => {
  //       await copyCode(codeBlock, copyButton);
  //     });
  //   });
  // }

  // Debounce function to limit the rate of function calls
  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  document.addEventListener("DOMContentLoaded", () => init());
  document.addEventListener("astro:after-swap", () => init());
  // Call preloadTheme directly on script load for immediate effect before DOMContentLoaded
  preloadTheme();
</script>
