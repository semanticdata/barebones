<script is:inline>
  function init() {
    preloadTheme();
    onScroll();
    animate();
    updateThemeButtons();
    // addCopyCodeButtons();

    const backToTop = document.getElementById("back-to-top");
    backToTop?.addEventListener("click", (event) => scrollToTop(event));

    const themeButtons = {
      light: document.getElementById("light-theme-button"),
      dark: document.getElementById("dark-theme-button"),
      system: document.getElementById("system-theme-button"),
    };

    Object.entries(themeButtons).forEach(([theme, button]) => {
      button?.addEventListener("click", () => {
        localStorage.setItem("theme", theme);
        toggleTheme(theme === "dark");
        updateThemeButtons();
      });
    });

    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", (event) => {
        if (localStorage.theme === "system") {
          toggleTheme(event.matches);
        }
      });

    document.addEventListener("scroll", onScroll);
  }

  function updateThemeButtons() {
    const theme = localStorage.getItem("theme");
    const themeButtons = {
      light: document.getElementById("light-theme-button"),
      dark: document.getElementById("dark-theme-button"),
      system: document.getElementById("system-theme-button"),
    };

    Object.values(themeButtons).forEach((button) => {
      button?.classList.remove("bg-black/15", "dark:bg-white/5");
    });

    themeButtons[theme]?.classList.add("bg-black/15", "dark:bg-white/5");
  }

  function animate() {
    const animateElements = document.querySelectorAll(".animate");

    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add("show");
      }, index * 100);
    });
  }

  function onScroll() {
    if (window.scrollY > 0) {
      document.documentElement.classList.add("scrolled");
    } else {
      document.documentElement.classList.remove("scrolled");
    }
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  }

  function toggleTheme(dark) {
    const css = document.createElement("style");

    css.appendChild(
      document.createTextNode(
        `* {
               -webkit-transition: none !important;
               -moz-transition: none !important;
               -o-transition: none !important;
               -ms-transition: none !important;
               transition: none !important;
            }
          `,
      ),
    );

    document.head.appendChild(css);

    if (dark) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }

    window.getComputedStyle(css).opacity;
    document.head.removeChild(css);
  }

  function preloadTheme() {
    const userTheme = localStorage.theme;

    if (userTheme === "light" || userTheme === "dark") {
      toggleTheme(userTheme === "dark");
    } else {
      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
    }
  }

  // function addCopyCodeButtons() {
  //   const copyButtonLabel = "Copy Code";
  //   const codeBlocks = Array.from(document.querySelectorAll("pre"));

  //   async function copyCode(codeBlock, copyButton) {
  //     const codeText = codeBlock.innerText;
  //     const textToCopy = codeText.replace(copyButton.innerText, "");

  //     await navigator.clipboard.writeText(textToCopy);
  //     copyButton.innerText = "Copied!";

  //     setTimeout(() => {
  //       copyButton.innerText = copyButtonLabel;
  //     }, 2000);
  //   }

  //   function createCopyButton() {
  //     const button = document.createElement("button");
  //     button.innerText = copyButtonLabel;
  //     button.classList.add("copy-code");
  //     button.setAttribute("aria-label", "Copy code to clipboard");
  //     return button;
  //   }

  //   codeBlocks.forEach(codeBlock => {
  //     const wrapper = document.createElement("div");
  //     wrapper.style.position = "relative";

  //     const copyButton = createCopyButton();
  //     codeBlock.setAttribute("tabindex", "0");
  //     codeBlock.appendChild(copyButton);

  //     codeBlock.parentNode.insertBefore(wrapper, codeBlock);
  //     wrapper.appendChild(codeBlock);

  //     copyButton.addEventListener("click", async () => {
  //       await copyCode(codeBlock, copyButton);
  //     });
  //   });
  // }

  document.addEventListener("DOMContentLoaded", () => init());
  document.addEventListener("astro:after-swap", () => init());
  preloadTheme();
</script>
